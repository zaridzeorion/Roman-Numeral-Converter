{"version":3,"sources":["App.js","index.js"],"names":["App","useState","input","setInput","result","setResult","copied","setCopied","id","type","className","onChange","e","target","value","onClick","newResult","test","num","romansToDecimals","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","key","convertToRoman","navigator","clipboard","writeText","setTimeout","style","textAlign","ReactDOM","render","document","getElementById"],"mappings":"iPA2FeA,MAvFf,WAAe,MA+BaC,mBAAS,IA/BtB,mBA+BNC,EA/BM,KA+BCC,EA/BD,OAgCeF,mBAAS,IAhCxB,mBAgCNG,EAhCM,KAgCEC,EAhCF,OAiCeJ,oBAAS,GAjCxB,mBAiCNK,EAjCM,KAiCEC,EAjCF,KAsDb,OACE,sBAAKC,GAAG,MAAR,UACE,oBAAIA,GAAG,QAAP,qCAEA,uBACA,yDACA,uBAAOC,KAAK,OAAOC,UAAU,QAAQC,SAzBpB,SAAAC,GACnBT,EAASS,EAAEC,OAAOC,QAwB6CA,MAAOZ,IAEpE,uBACA,wBAAQa,QAxBU,SAAAH,GACpB,IAAII,GAIgC,IADb,WACHC,KAAKf,IACvBc,EA5CJ,SAAwBE,GACtB,IAAIC,EAAmB,CACnBC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,GACJC,EAAG,GACHC,GAAI,GACJC,EAAG,GACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJC,EAAG,GAGH5B,EAAS,GAEb,IAAK,IAAI6B,KAAOd,EACZ,KAAMD,GAAOC,EAAiBc,IAC1B7B,GAAU6B,EACVf,GAAOC,EAAiBc,GAIhC,OAAO7B,EAkBO8B,CAAehC,GAC3BG,EAAUW,IAGVX,EADAW,EAAS,6BAeT,qBACA,uBAEA,yCACA,uBACED,QAAS,WACPoB,UAAUC,UAAUC,UAAUjC,GAC9BG,GAAU,GACV+B,YAAW,WACT/B,GAAU,KACT,MAELgC,MAAO,CAACC,UAAW,UACnBhC,GAAG,SACHE,UAAU,QACVI,MAAOV,IAGT,uBACCE,EAAS,sDAAgC,SCjFhDmC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.fd37afdf.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\n\nimport './App.css';\n\nfunction App() {\n  function convertToRoman(num) {\n    let romansToDecimals = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    }\n\n    let result = '';\n\n    for (let key in romansToDecimals){\n        while(num >= romansToDecimals[key]){\n            result += key;\n            num -= romansToDecimals[key];\n        }     \n    }\n\n    return result;\n\n}\n\n  const [input, setInput] = useState('')\n  const [result, setResult] = useState('')\n  const [copied, setCopied] = useState(false)\n\n  const handleChange = e => {\n    setInput(e.target.value)\n  }\n\n  const handleConvert = e => {\n    let newResult;\n\n    // If input is numbers, convert it, if not, write error\n    let onlyNumbersRegex = /^[0-9]*$/\n    if(onlyNumbersRegex.test(input) === true){\n      newResult = convertToRoman(input)\n      setResult(newResult)\n    }else {\n      newResult = `Please use only numbers.`\n      setResult(newResult)\n    }\n\n  }\n\n  return (\n    <div id=\"App\">\n      <h1 id=\"title\">Roman-Numeral Converter</h1>\n\n      <br />\n      <label>Enter Roman Numeral:</label>\n      <input type=\"text\" className=\"input\" onChange={handleChange} value={input}/>\n\n      <br/>\n      <button onClick={handleConvert}>Convert</button>\n      <br />\n\n      <h3>Result:</h3>\n      <input \n        onClick={() => {\n          navigator.clipboard.writeText(result)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 1000)\n        }}\n        style={{textAlign: 'center'}} \n        id=\"result\" \n        className=\"input\" \n        value={result}\n      />\n\n      <br />\n      {copied ? <h5>Copied to clipboard!</h5> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}